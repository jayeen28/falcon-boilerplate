{
  "Create crud routes and socket function": {
    "scope": "javascript",
    "prefix": "service",
    "body": [
      "const { create, get, getAll, update, remove } = require('./${1:service}.entity');",
      "",
      "/**",
      " * INSTRUCTIONS:",
      " * 1. Call api and socket handler functions from entity file (ex: ${1/([A-Z][a-z]+)/${1:/camelcase}/}.entity.js).",
      " */",
      "",
      "/**",
      " * Define API routes for ${1/([A-Z][a-z]+)/${1:/camelcase}/} management.",
      " */"
      "function ${1/([A-Z][a-z]+)/${1:/camelcase}/}Api() {",
      "",
      "  /**",
      "   * POST /${1/([A-Z][a-z]+)/${1:/camelcase}/}",
      "   * @description This route is used to create a ${1/([A-Z][a-z]+)/${1:/camelcase}/}.",
      "   * @response {Object} 201 - The new ${1/([A-Z][a-z]+)/${1:/camelcase}/}.",
      "   * @body {Object} - The data to create a ${1/([A-Z][a-z]+)/${1:/camelcase}/}.",
      "  */",
      "  this.router.post('/${1/([A-Z][a-z]+)/${1:/camelcase}/}', create(this));",
      "",
      "  /**",
      "   * GET /${1/([A-Z][a-z]+)/${1:/camelcase}/}",
      "   * @description This route is used to get all ${1/([A-Z][a-z]+)/${1:/camelcase}/}s.",
      "   * @response {Object} 200 - The paginated ${1/([A-Z][a-z]+)/${1:/camelcase}/}s.",
      "   * @response {Array} 200 - The ${1/([A-Z][a-z]+)/${1:/camelcase}/}s without paginations.",
      "  */",
      "  this.router.get('/${1/([A-Z][a-z]+)/${1:/camelcase}/}', getAll(this));",
      "",
      "  /**",
      "   * GET /${1/([A-Z][a-z]+)/${1:/camelcase}/}/:id",
      "   * @description This route is used to get a ${1/([A-Z][a-z]+)/${1:/camelcase}/}.",
      "   * @response {Object} 200 - The ${1/([A-Z][a-z]+)/${1:/camelcase}/}.",
      "  */",
      "  this.router.get('/${1/([A-Z][a-z]+)/${1:/camelcase}/}/:id', get(this));",
      "",
      "  /**",
      "   * PATCH /${1/([A-Z][a-z]+)/${1:/camelcase}/}/:id",
      "   * @description This route is used to update a ${1/([A-Z][a-z]+)/${1:/camelcase}/}.",
      "   * @response {Object} 200 - The updated ${1/([A-Z][a-z]+)/${1:/camelcase}/}.",
      "   * @body {Object} - The data to update a ${1/([A-Z][a-z]+)/${1:/camelcase}/}.",
      "  */",
      "  this.router.patch('/${1/([A-Z][a-z]+)/${1:/camelcase}/}/:id', update(this));",
      "",
      "  /**",
      "   * DELETE /${1/([A-Z][a-z]+)/${1:/camelcase}/}/:id",
      "   * @description This route is used to remove a ${1/([A-Z][a-z]+)/${1:/camelcase}/}.",
      "   * @response {Object} 200 - The removed ${1/([A-Z][a-z]+)/${1:/camelcase}/}.",
      "  */",
      "  this.router.delete('/${1/([A-Z][a-z]+)/${1:/camelcase}/}/:id', remove(this));",
      "}",
      "",
      "/**",
      " * Register event handlers for ${1/([A-Z][a-z]+)/${1:/camelcase}/} related events.",
      " */"
      "function ${1/([A-Z][a-z]+)/${1:/camelcase}/}Socket() {",
      "",
      "  // this.socket.on('demo', demoHandlerFromEntity(this));",
      "}",
      "",
      "module.exports = { ${1/([A-Z][a-z]+)/${1:/camelcase}/}Api, ${1/([A-Z][a-z]+)/${1:/camelcase}/}Socket };"
    ],
    "description": "Creates route and socket boilerplate with coder instructions"
  }
}
