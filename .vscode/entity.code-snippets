{
  "Generate Entity CRUD Operations": {
    "scope": "javascript,typescript",
    "prefix": "entity",
    "body": [
      "const TABLE_NAME = '${1:entity}';",
      "",
      "module.exports.create = ({ db }) => async (req, res, next) => {",
      "  try {",
      "    await db.execute(`CALL precedure(?,?)`, ['argument1','argument2']);",
      "    return res.status(200).send('data');",
      "  } catch (e) { next(e) }",
      "};",
      "",
      "module.exports.get = ({ db }) => async (req, res, next) => {",
      "  try {",
      "    await db.execute(`CALL precedure(?,?)`, ['argument1','argument2']);",
      "    return res.status(200).send('data');",
      "  } catch (e) { next(e) }",
      "};",
      "",
      "module.exports.getAll = ({ db }) => async (req, res, next) => {",
      "  try {",
      "    await db.execute(`CALL precedure(?,?)`, ['argument1','argument2']);",
      "    return res.status(200).send('data');",
      "  } catch (e) { next(e) }",
      "};",
      "",
      "module.exports.update = ({ db }) => async (req, res, next) => {",
      "  try {",
      "    await db.execute(`CALL precedure(?,?)`, ['argument1','argument2']);",
      "    return res.status(200).send('data');",
      "  } catch (e) { next(e) }",
      "};",
      "",
      "module.exports.remove = ({ db }) => async (req, res, next) => {",
      "  try {",
      "    await db.execute(`CALL precedure(?,?)`, ['argument1','argument2']);",
      "    return res.status(200).send('data');",
      "  } catch (e) { next(e) }",
      "};"
    ],
    "description": "Generate Entity CRUD Operations"
  }
}